name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    - name: Prepare SSH Key
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
        chmod 600 key.pem

    - name: Deploy to EC2 via SSH
      run: |
        HOST=${{ secrets.EC2_HOST }}
        USER=${{ secrets.EC2_USER }}

        # Pull the latest Docker image from ECR
        ssh -o StrictHostKeyChecking=no -i key.pem $USER@$HOST "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"
        ssh -o StrictHostKeyChecking=no -i key.pem $USER@$HOST "docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:latest"

        # Stop and remove the existing container
        ssh -o StrictHostKeyChecking=no -i key.pem $USER@$HOST "docker stop frontend || true"
        ssh -o StrictHostKeyChecking=no -i key.pem $USER@$HOST "docker rm frontend || true"

        # Run the new container
        ssh -o StrictHostKeyChecking=no -i key.pem $USER@$HOST "docker run -d -p 2000:2000 --name frontend ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:latest"

        # Reload Nginx to apply changes
        ssh -o StrictHostKeyChecking=no -i key.pem $USER@$HOST "sudo systemctl reload nginx"
